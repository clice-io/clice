# ========================================================================
# üöÄ Clice Local Setup
# ========================================================================
# File: docker/linux/utility/local_setup.py  
# Purpose: Final setup phase for the Clice development container
#
# This script handles the installation and configuration of all pre-downloaded
# packages and tools to complete the development environment setup.
# ========================================================================

"""
üöÄ Clice Local Setup Script

Handles the final setup phase of the Clice development container by:
1. Installing all pre-downloaded APT packages
2. Extracting and installing the custom toolchain
3. Setting up CMake and XMake build systems
4. Installing Python packages via uv
5. Configuring environment variables and PATH

This script maximizes Docker build cache efficiency by separating the
installation phase from the download phase, allowing for independent
caching of each step.
"""

import os
import sys
import tarfile

# Ensure utility directory is in Python path for imports
utility_path = os.path.dirname(os.path.abspath(__file__))
if utility_path not in sys.path:
    sys.path.insert(0, utility_path)

# Import all configuration from build_config using new component structure
from config.build_config import (
    ENVIRONMENT_CONFIG_FILE,
    RELEASE_PACKAGE_DIR,  
    PACKED_RELEASE_PACKAGE_PATH,
    DEVELOPMENT_SHELL_VARS,
    PROJECT_ROOT,
    # Import component instances for structured access
    APT, UV, CMAKE, XMAKE, TOOLCHAIN
)

# Import build_utils for run_command and other utilities
from build_utils import (
    Job,
    ParallelTaskScheduler,
    run_command
)

# ========================================================================
# üåç Environment Setup Functions
# ========================================================================

def setup_environment_variables():
    """Write environment variables to /root/.bashrc for persistent shell environment."""
    print("üåç Setting up environment variables...")
    
    bashrc_path = ENVIRONMENT_CONFIG_FILE
    
    # Ensure .bashrc exists
    if not os.path.exists(bashrc_path):
        with open(bashrc_path, 'w') as f:
            f.write("# Generated by Clice local setup\n")
    
    # Read existing content to avoid duplicates
    existing_content = ""
    with open(bashrc_path, 'r') as f:
        existing_content = f.read()
    
    # Add environment variables from build config
    for key, value in DEVELOPMENT_SHELL_VARS.items():
        env_line = f"export {key}=\"{value}\"\n"
        if f'export {key}=' not in existing_content:
            with open(bashrc_path, 'a') as f:
                f.write(env_line)
            print(f"  ‚úÖ Added {key}={value}")
        else:
            print(f"  ‚úÖ {key} already set")
    
    print("‚úÖ Environment variables configured")

# ========================================================================
# üì¶ Package Installation Functions
# ========================================================================

def install_apt_packages(apt_component):
    """Install APT development packages from downloaded .deb files."""
    print("üì¶ Installing APT development packages...")
    
    if not os.path.exists(apt_component.package_dir):
        print(f"‚ö†Ô∏è APT package directory not found: {apt_component.package_dir}")
        print("Downloading packages first...")
        return
    
    # Install all .deb files found in the package directory
    deb_files = [f for f in os.listdir(apt_component.package_dir) if f.endswith('.deb')]
    
    if deb_files:
        # Use dpkg to install all .deb files, with apt-get fallback for dependencies
        run_command(f"dpkg -i {apt_component.package_dir}/*.deb || apt-get install -f -y")
        print(f"‚úÖ Installed {len(deb_files)} APT packages")
    else:
        print("‚ö†Ô∏è No .deb files found in APT package directory")

def install_toolchain(toolchain_component):
    """Install the custom toolchain."""
    print("üîß Installing custom toolchain...")
    
    # Toolchain is already installed at toolchain package directory within RELEASE_PACKAGE_DIR
    if not os.path.exists(toolchain_component.package_dir):
        print("‚ö†Ô∏è Toolchain package directory not found")
        return
    
    print(f"‚úÖ Toolchain available at: {toolchain_component.package_dir}")
        
    print(f"‚úÖ Toolchain setup completed")

def install_cmake(cmake_component):
    """Install CMake from pre-downloaded installer."""
    print("üîß Installing CMake...")
    
    cmake_installer_filename = cmake_component.tarball_name
    cmake_installer_path = os.path.join(cmake_component.package_dir, cmake_installer_filename)
    
    if not os.path.exists(cmake_installer_path):
        print(f"‚ö†Ô∏è CMake installer not found: {cmake_installer_path}")
        return
    
    # Make installer executable and run it  
    run_command(f"chmod +x {cmake_installer_path}")
    
    # Use CMAKE component package_dir as install directory
    cmake_install_dir = cmake_component.package_dir
    os.makedirs(cmake_install_dir, exist_ok=True)
    
    # Install CMake to the component package directory
    run_command(f"{cmake_installer_path} --prefix={cmake_install_dir} --skip-license")
    
    # Create symlinks to system PATH
    cmake_bin_dir = f"{cmake_install_dir}/bin"
    if os.path.exists(cmake_bin_dir):
        for binary in os.listdir(cmake_bin_dir):
            src = os.path.join(cmake_bin_dir, binary)
            dst = f"/usr/local/bin/{binary}"
            if os.path.isfile(src) and not os.path.exists(dst):
                os.symlink(src, dst)
    
    print(f"‚úÖ CMake installed to {cmake_install_dir}")

def install_xmake(xmake_component):
    """Install XMake from pre-downloaded package.""" 
    print("üî® Installing XMake...")
    
    xmake_filename = xmake_component.tarball_name
    xmake_path = os.path.join(xmake_component.package_dir, xmake_filename)
    
    if not os.path.exists(xmake_path):
        print(f"‚ö†Ô∏è XMake package not found: {xmake_path}")
        return
    
    # Make XMake bundle executable
    run_command(f"chmod +x {xmake_path}")
    
    # Install XMake using update-alternatives
    run_command(f"update-alternatives --install /usr/bin/xmake xmake {xmake_path} 100")
    
    print("‚úÖ XMake installed successfully")

def install_python_packages(uv_component):
    """Install Python packages from uv cache."""
    print("üêç Installing Python packages...")
    
    if not os.path.exists(uv_component.package_dir):
        print(f"‚ö†Ô∏è Python package directory not found: {uv_component.package_dir}")
        return
    
    # Install wheel files found in the UV package directory
    wheel_files = [f for f in os.listdir(uv_component.package_dir) if f.endswith('.whl')]
    
    if wheel_files:
        # Use uv to install from the cached packages
        wheel_paths = [os.path.join(uv_component.package_dir, f) for f in wheel_files]
        run_command(f"uv pip install --find-links {uv_component.package_dir} --no-index --force-reinstall --no-deps {' '.join(wheel_paths)}")
        print(f"‚úÖ Installed {len(wheel_files)} Python packages")
    else:
        print("‚ö†Ô∏è No wheel files found in UV package directory")

# ========================================================================
# üìã Setup Orchestration
# ========================================================================

def setup_git_safe_directory():
    """Configure git to treat the workspace as safe."""
    print("üîß Configuring git safe directory...")
    
    run_command(f"git config --global --add safe.directory {PROJECT_ROOT}")
    print("‚úÖ Git safe directory configured")

def extract_release_archive():
    """Extract the release archive to setup the environment."""
    print("üì¶ Extracting release archive...")
    
    if not os.path.exists(PACKED_RELEASE_PACKAGE_PATH):
        print("‚ö†Ô∏è Packed release archive not found")
        return
    
    # Extract the release archive to the appropriate location
    release_parent_dir = os.path.dirname(RELEASE_PACKAGE_DIR)
    os.makedirs(release_parent_dir, exist_ok=True)
    
    # Use Python tarfile module for extraction (reverse of packaging)
    print(f"    üìÅ Source: {PACKED_RELEASE_PACKAGE_PATH}")
    print(f"    üìÅ Target: {release_parent_dir}")
    
    with tarfile.open(PACKED_RELEASE_PACKAGE_PATH, 'r:xz') as tar:
        tar.extractall(path=release_parent_dir, filter='data')
    print(f"‚úÖ Release archive extracted to: {RELEASE_PACKAGE_DIR}")

def main():
    """Main setup orchestration function with parallel task scheduling."""
    print("üöÄ Unpacking Clice Dev Container...")
    
    # Define setup jobs with proper dependency management
    jobs = {
        "extract_release_archive": Job("extract_release_archive", extract_release_archive, ()),
        "setup_environment_variables": Job("setup_environment_variables", setup_environment_variables, ()),
        "setup_git_safe_directory": Job("setup_git_safe_directory", setup_git_safe_directory, ()),
        "install_apt_packages": Job("install_apt_packages", install_apt_packages, (APT,)),
        "install_toolchain": Job("install_toolchain", install_toolchain, (TOOLCHAIN,)),
        "install_cmake": Job("install_cmake", install_cmake, (CMAKE,)),
        "install_xmake": Job("install_xmake", install_xmake, (XMAKE,)),
        "install_python_packages": Job("install_python_packages", install_python_packages, (UV,)),
    }
    
    # Define dependencies - some installations can run in parallel after archive extraction
    dependencies = {
        "extract_release_archive": set(),
        "setup_environment_variables": set(),
        "setup_git_safe_directory": set(),
        "install_apt_packages": {"extract_release_archive"},
        "install_toolchain": {"extract_release_archive"},
        "install_cmake": {"extract_release_archive"},
        "install_xmake": {"extract_release_archive"},
        "install_python_packages": {"extract_release_archive"},
    }
    
    # Execute setup tasks in parallel where possible
    scheduler = ParallelTaskScheduler(jobs, dependencies)
    scheduler.run()
    
    print("‚úÖ Clice development environment setup completed successfully!")
    print(f"üì¶ Components installed from: {RELEASE_PACKAGE_DIR}")

if __name__ == "__main__":
    main()